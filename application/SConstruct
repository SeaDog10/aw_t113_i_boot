import os
import sys
import rtconfig


if os.getenv('RTT_ROOT'):
    RTT_ROOT = os.getenv('RTT_ROOT')
else:
    RTT_ROOT = os.path.join(os.getcwd(), '..', '..')

# set RTT_ROOT
if not os.getenv("RTT_ROOT"): 
    RTT_ROOT="rt-thread"

sys.path = sys.path + [os.path.join(RTT_ROOT, 'tools')]
from building import *

target = ARGUMENTS.get('amp', 'master')  # 默认 master
print("[INFO] 输入为 %s 配置" % target)
os.system("%s update_config.py %s" % (sys.executable, target))

if target == "master":
    TARGET = 'rtthread_m.' + rtconfig.TARGET_EXT
    rtconfig.LFLAGS += ",-Map=rtthread_m.map" + " -T link_m.lds"
    rtconfig.POST_ACTION = rtconfig.OBJCPY + ' -O binary $TARGET rtthread_m.bin\n' + rtconfig.SIZE + ' $TARGET \n'
elif target == "slave":
    TARGET = 'rtthread_s.' + rtconfig.TARGET_EXT
    rtconfig.LFLAGS += ",-Map=rtthread_s.map" + " -T link_s.lds"
    rtconfig.POST_ACTION = rtconfig.OBJCPY + ' -O binary $TARGET rtthread_s.bin\n' + rtconfig.SIZE + ' $TARGET \n'
else:
    print("[ERROR] amp 参数错误，仅支持 master 或 slave")
    sys.exit(1)

DefaultEnvironment(tools=[])
env = Environment(tools = ['mingw'],
    AS   = rtconfig.AS, ASFLAGS = rtconfig.AFLAGS,
    CC   = rtconfig.CC, CFLAGS = rtconfig.CFLAGS,
    CXX  = rtconfig.CXX, CXXFLAGS = rtconfig.CXXFLAGS,
    AR   = rtconfig.AR, ARFLAGS = '-rc',
    LINK = rtconfig.LINK, LINKFLAGS = rtconfig.LFLAGS)
env.PrependENVPath('PATH', rtconfig.EXEC_PATH)
env['ASCOM'] = env['ASPPCOM']

Export('RTT_ROOT')
Export('rtconfig')

# prepare building environment
objs = PrepareBuilding(env, RTT_ROOT)

# make a building
DoBuilding(TARGET, objs)
